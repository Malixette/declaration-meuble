{% extends 'admin.html.twig' %} 
{#cle api googlemap : AIzaSyB4ryzwJCu-r-gIFduP2Nb5hmu75Iix2Dg#}

{% form_theme form 'bootstrap_4_layout.html.twig' %}
{% block stylesheets %}
    <style>
       #map {
        height: 250px;
        width: 100%;
       }
    </style>
{% endblock %}

{% block title %}Déclaration{% endblock %}

{% block header %}
    <h1 class="mt-5 mb-4 p-3 text-center">Déclarer un nouvel hébergement</h1>
{% endblock %}

{% block body %}

    {{ include('hebergement/_form.html.twig') }}

    {#<a href="{{ path('hebergement_index') }}">back to list</a>#}
    
{% endblock %}

{% block javascripts %}

  
################# JS DE LA MAP  #######################


<script>
    var ville = '';

    function initMap() {
        var ville = {lat: 43.404811, lng: 5.053728};
        var map = new google.maps.Map(document.getElementById('map'), {
        zoom: 16,
        center: ville
        });

        var contentString = '<div id="content">'+
            '<div id="siteNotice">'+
            '</div>'+
            '<h1 id="firstHeading" class="firstHeading">Nom hébergement</h1>'+
            'Lat = '+
            'Longitude = '
            '</div>'+
            '</div>';

        console.log(contentString);

        var infowindow = new google.maps.InfoWindow({
            content: contentString
        });
        

        var marker = new google.maps.Marker({
        position: ville,
        map: map,
        draggable: true,
        title: 'Nom de l\'hébergement'
        });

        marker.addListener('click', function() {
            infowindow.open(map, marker);
        });
      }
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB4ryzwJCu-r-gIFduP2Nb5hmu75Iix2Dg&callback=initMap&libraries=places"></script> 

<script src="https://code.jquery.com/jquery-1.12.4.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>



{######################### JS DE L'AUTOCOMPLETE  #####################}
<script> 
    function initializeAutocomplete(id) {
    var element = document.getElementById(id);
        if (element) {
            var autocomplete = new google.maps.places.Autocomplete(element, { types: ['geocode'] });
            google.maps.event.addListener(autocomplete, 'place_changed', onPlaceChanged);
        }
    }

    function onPlaceChanged() {
    var place = this.getPlace();

    console.log(place);  // Uncomment this line to view the full object returned by Google API.
        for (var i in place.address_components) {
            var component = place.address_components[i];
            // google.maps.places.Autocomplete
            
            for (var j in component.types) {  // Some types are ["country", "political"]
            var type_element = document.getElementById(component.types[j]);
            console.log(component.types[j]);
            var commune = component.types[j];
            if (commune == 'locality')
            {
              ville = component.long_name;
            }
                if (type_element) {
                type_element.value = component.long_name;
                }
            }
        }
    }

    google.maps.event.addDomListener(window, 'load', function() {
    initializeAutocomplete('hebergement_heb_adresse');
    });

    </script>

{################# JS RECCUPERATION DES CHAMPS CP, VILLE, ETC  ######################}
<script>
 var placeSearch, autocomplete;
      var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        country: 'long_name',
        postal_code: 'short_name'
      };

      function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
            /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
            {types: ['geocode']});

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
      }

      function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        for (var component in componentForm) {
          document.getElementById(component).value = '';
          document.getElementById(component).disabled = false;
        }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        for (var i = 0; i < place.address_components.length; i++) {
          var addressType = place.address_components[i].types[0];
          if (componentForm[addressType]) {
            var val = place.address_components[i][componentForm[addressType]];
            document.getElementById(addressType).value = val;
          }
        }
      }

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
      function geolocate() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy
            });
            autocomplete.setBounds(circle.getBounds());
          });
        }
      }
    </script>
  


<script>
  $( function() {
    $( "#accordion" ).accordion({
      collapsible: true
    });
  } );
  </script>

{% endblock %}

