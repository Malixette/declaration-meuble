{% extends 'admin.html.twig' %} 

{% form_theme form 'bootstrap_4_layout.html.twig' %}
{% block stylesheets %}
    <style>
    #map {
        height: 250px;
        width: 100%;
    }
    #accordion h4 {
        padding: 10px;
        color : white;
        background-color: rgb(65, 90, 126);
    }
    #accordion h4:hover{
        padding: 10px;
        color : white;
        background-color: rgb(34, 64, 95);
    }
    </style>
{% endblock %}

{% block title %}Déclaration{% endblock %}

{% block header %}
    <h1 class="mb-4 p-3 text-center">Déclarer un nouvel hébergement</h1>
{% endblock %}

{% block body %}

    {{ include('hebergement/_form.html.twig') }}

    {#<a href="{{ path('hebergement_index') }}">back to list</a>#}
    
{% endblock %}

{% block javascripts %}
 <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
 <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
 
<script>
  $( function() {
    $( "#accordion" ).accordion({
      heightStyle: "content"
    });
  } );
</script>


<script>

     function initMap() {
        var map = new google.maps.Map(document.getElementById('map'), {
            center: {lat: 46.3333, lng: 2.6},
            zoom: 4
        });
        var input = document.getElementById('autocomplete');
        
        var options = { componentRestrictions: {country: "fr"} };
        
        var componentForm = {
            street_number: 'short_name',
            route: 'long_name',
            locality: 'long_name',
            postal_code: 'short_name'
            };

        var autocomplete = new google.maps.places.Autocomplete(input, options);
        autocomplete.bindTo('bounds', map);

        var infowindow = new google.maps.InfoWindow();
        var marker = new google.maps.Marker({
          map: map,
          anchorPoint: new google.maps.Point(0, -29)
        });


        autocomplete.addListener('place_changed', function() {
          infowindow.close();
          marker.setVisible(false);
          var place = autocomplete.getPlace();
          if (!place.geometry) {
            window.alert("No details available for input: '" + place.name + "'");
            return;
          }
           
          var lat = place.geometry.location.lat();
          var lng = place.geometry.location.lng();
          var placeId = place.place_id;

          document.getElementById("hebergement_heb_lat").value = lat;
          document.getElementById("hebergement_heb_long").value = lng;          


          for (var component in componentForm) {
            
            console.log(component);
            //faire if pour sécuriser
            document.getElementById(component).value = '';
            document.getElementById(component).disabled = false;
          }

          for (var i = 0; i < place.address_components.length; i++) {
            var addressType = place.address_components[i].types[0];
            if (componentForm[addressType]) {
            var val = place.address_components[i][componentForm[addressType]];
            document.getElementById(addressType).value = val;
            }
          }

          if (place.geometry.viewport) {
            map.fitBounds(place.geometry.viewport);
          } else {
            map.setCenter(place.geometry.location);
            map.setZoom(17);
          }
          marker.setIcon(/** @type {google.maps.Icon} */({
            url: place.icon,
            size: new google.maps.Size(71, 71),
            origin: new google.maps.Point(0, 0),
            anchor: new google.maps.Point(17, 34),
            scaledSize: new google.maps.Size(35, 35)
          }));
          marker.setPosition(place.geometry.location);
          marker.setVisible(true);

          var address = '';
          if (place.address_components) {
            address = [
              (place.address_components[0] && place.address_components[0].short_name || ''),
              (place.address_components[1] && place.address_components[1].short_name || ''),
              (place.address_components[6] && place.address_components[6].short_name || ''),
              (place.address_components[2] && place.address_components[2].short_name || '')
            ].join(' ');
          }

          infowindow.setContent('<div><strong>' + address + '</strong><br>');
          infowindow.open(map, marker);
        });

        function setupClickListener(id, types) {
          var radioButton = document.getElementById(id);
          radioButton.addEventListener('click', function() {
            autocomplete.setTypes(types);
          });
        }

      }
 
</script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB4ryzwJCu-r-gIFduP2Nb5hmu75Iix2Dg&signed_in=true&libraries=places&callback=initMap"
        async defer>
</script>

  

{% endblock %}

