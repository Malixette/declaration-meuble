{% extends 'admin.html.twig' %} 
{#cle api googlemap : AIzaSyB4ryzwJCu-r-gIFduP2Nb5hmu75Iix2Dg#}

{% form_theme form 'bootstrap_4_layout.html.twig' %}
{% block stylesheets %}
    <style>
    #map {
        height: 250px;
        width: 100%;
    }
    #accordion h4 {
        padding: 10px;
        color : white;
        background-color: rgb(65, 90, 126);
    }
    #accordion h4:hover{
        padding: 10px;
        color : white;
        background-color: rgb(34, 64, 95);
    }
    </style>
{% endblock %}

{% block title %}Déclaration{% endblock %}

{% block header %}
    <h1 class="mt-5 mb-4 p-3 text-center">Déclarer un nouvel hébergement</h1>
{% endblock %}

{% block body %}

    {{ include('hebergement/_form.html.twig') }}

    {#<a href="{{ path('hebergement_index') }}">back to list</a>#}
    
{% endblock %}

{% block javascripts %}
 <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
 <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
 
<script>
  $( function() {
    $( "#accordion" ).accordion({
      heightStyle: "content"
    });
  } );
</script>

<script>

function initMap() {
    var options = { componentRestrictions: {country: "fr"} };
    
    var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        country: 'long_name',
        postal_code: 'short_name'
    };

    var map = new google.maps.Map(document.getElementById('map'), {
        center: {lat: 46.3333, lng: 2.6},
        zoom: 4
    });
    
    var input = /** @type {!HTMLInputElement} */(
      document.getElementById('hebergement_heb_adresse'));
 
    var autocomplete = new google.maps.places.Autocomplete(input, options);
    autocomplete.bindTo('bounds', map);
 
  var infowindow = new google.maps.InfoWindow();
  var marker = new google.maps.Marker({
    map: map,
    draggable: true,
    anchorPoint: new google.maps.Point(0, -29)
  });
 
  autocomplete.addListener('place_changed', function() {
    infowindow.close();
    marker.setVisible(false);
    var place = autocomplete.getPlace();
    if (!place.geometry) {
      window.alert("Autocomplete's returned place contains no geometry");
      return;
    }
 
    // If the place has a geometry, then present it on a map.
    if (place.geometry.viewport) {
      map.fitBounds(place.geometry.viewport);
    } else {
      map.setCenter(place.geometry.location);
      map.setZoom(17); 
    }
    marker.setIcon(/** @type {google.maps.Icon} */({
      url: place.icon,
      size: new google.maps.Size(71, 71),
      origin: new google.maps.Point(0, 0),
      anchor: new google.maps.Point(17, 34),
      scaledSize: new google.maps.Size(35, 35)
    }));
    marker.setPosition(place.geometry.location);
    marker.setVisible(true);
 
    var address = '';
    if (place.address_components) {
      address = [
        (place.address_components[0] && place.address_components[0].short_name || ''),
        (place.address_components[1] && place.address_components[1].short_name || ''),
        (place.address_components[2] && place.address_components[2].short_name || '')
      ].join(' ');
    }
     console.log(adresse);
    infowindow.setContent('</strong><br>' + address);
    infowindow.open(map, marker);
  });
 
  // Sets a listener on a radio button to change the filter type on Places
  // Autocomplete.
  function setupClickListener(id, types) {
    var radioButton = document.getElementById(id);
    radioButton.addEventListener('click', function() {
      autocomplete.setTypes(types);
    });
  }
 
//   setupClickListener('changetype-all', []);
  setupClickListener('changetype-address', ['address']);
//   setupClickListener('changetype-establishment', ['establishment']);
//   setupClickListener('changetype-geocode', ['geocode']);
}
 
</script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB4ryzwJCu-r-gIFduP2Nb5hmu75Iix2Dg&signed_in=true&libraries=places&callback=initMap"
        async defer>
</script>

  
{################## JS DE LA MAP  ########################}


{#<script>#}
{#    function initMap() {#}
{#        var ville = {lat: 46.3333, lng: 2.6};#}
{#        var map = new google.maps.Map(document.getElementById('map'), {#}
{#        zoom: 5,#}
{#        center: ville#}
{#        });#}

    var contentString = '<div id="content">'+
     '<div id="siteNotice">'+
     '</div>'+
     '<h1 id="firstHeading" class="firstHeading">Nom hébergement</h1>'+
     'Lat = '+
     'Longitude = '
     '</div>'+
     '</div>';

        // console.log(contentString);

{#        var infowindow = new google.maps.InfoWindow({#}
{#            content: contentString#}
{#        });#}
        
{#    if{    #}
        // var marker = new google.maps.Marker({
        // position: ville,
        // map: map,
        // draggable: true,
        // title: 'Nom de l\'hébergement'
        // });

        // marker.addListener('click', function() {
        //     infowindow.open(map, marker);
        // });
{#      }#}
      
      
      
{#</script>#}

{#<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB4ryzwJCu-r-gIFduP2Nb5hmu75Iix2Dg&callback=initMap&libraries=places"></script> #}

{#<script src="https://code.jquery.com/jquery-1.12.4.js"></script>#}
{#<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>#}



{######################### JS DE L'AUTOCOMPLETE  #####################}
// <script> 
//     function initializeAutocomplete(id) {
//     var element = document.getElementById(id);
//         if (element) {
//             var autocomplete = new google.maps.places.Autocomplete(element, { types: ['geocode'] });
//             google.maps.event.addListener(autocomplete, 'place_changed', onPlaceChanged);
//         }
//     }

//     function onPlaceChanged() {
//     var place = this.getPlace();

//     console.log(place);  // Uncomment this line to view the full object returned by Google API.
//         for (var i in place.address_components) {
//             var component = place.address_components[i];
//             // google.maps.places.Autocomplete
            
//             for (var j in component.types) {  // Some types are ["country", "political"]
//             var type_element = document.getElementById(component.types[j]);
//             console.log(component.types[j]);
//             var commune = component.types[j];
//             if (commune == 'locality')
//             {
//               ville = component.long_name;
//             }
//                 if (type_element) {
//                 type_element.value = component.long_name;
//                 }
//             }
//         }
//     }

//     google.maps.event.addDomListener(window, 'load', function() {
//     initializeAutocomplete('hebergement_heb_adresse');
//     });

//     </script>

{################# JS RECCUPERATION DES CHAMPS CP, VILLE, ETC  ######################}
<script>
 var placeSearch, autocomplete;
      var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        country: 'long_name',
        postal_code: 'short_name'
      };

      function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
            /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
            {types: ['geocode']});

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
      }

      function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        for (var component in componentForm) {
          document.getElementById(component).value = '';
          document.getElementById(component).disabled = false;
        }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        for (var i = 0; i < place.address_components.length; i++) {
          var addressType = place.address_components[i].types[0];
          if (componentForm[addressType]) {
            var val = place.address_components[i][componentForm[addressType]];
            document.getElementById(addressType).value = val;
          }
        }
      }

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
      function geolocate() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy
            });
            autocomplete.setBounds(circle.getBounds());
          });
        }
      }
      
      // var zipCode
      //   zipCode = document.getElementById("postal_code").value;
      //       alert(zipCode);
    </script>
  

{######################ACCORDEON###########################}
{#// <script>#}
//   $( function() {
//     $( "#accordion" ).accordion({
//       collapsible: true
//     });
//   } );
{#//</script>#}

{% endblock %}

