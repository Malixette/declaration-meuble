{% extends 'admin.html.twig' %} 
{#cle api googlemap : AIzaSyB4ryzwJCu-r-gIFduP2Nb5hmu75Iix2Dg#}
{% form_theme form 'bootstrap_4_layout.html.twig' %}
{% block stylesheets %}
    <style>
       #map {
        height: 150px;
        width: 100%;
       }
    </style>
{% endblock %}

{% block title %}Déclaration{% endblock %}

{% block header %}
    <h1 class="mt-5 mb-4 p-3 text-center">Déclarer un nouvel hébergement</h1>
{% endblock %}

{% block body %}
    {#<div id="map"></div>#}
        
    {{ include('hebergement/_form.html.twig') }}

    {#<a href="{{ path('hebergement_index') }}">back to list</a>#}
    
{% endblock %}

{% block javascripts %}
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAqqDnNMRCo88ogY8b2HlCp1HNMDIzuMG4&libraries=places"></script>


{######################### JS DE L'AUTOCOMPLETE  #####################}
<script> 
    function initializeAutocomplete(id) {
    var element = document.getElementById(id);
        if (element) {
            var autocomplete = new google.maps.places.Autocomplete(element, { types: ['geocode'] });
            google.maps.event.addListener(autocomplete, 'place_changed', onPlaceChanged);
        }
    }

    function onPlaceChanged() {
    var place = this.getPlace();

    // console.log(place);  // Uncomment this line to view the full object returned by Google API.

        for (var i in place.address_components) {
            var component = place.address_components[i];google.maps.places.Autocomplete
            
            for (var j in component.types) {  // Some types are ["country", "political"]
            var type_element = document.getElementById(component.types[j]);
                if (type_element) {
                type_element.value = component.long_name;
                }
            }
        }
    }

    google.maps.event.addDomListener(window, 'load', function() {
    initializeAutocomplete('hebergement_heb_adresse');
    });

    </script>

{################# JS RECCUPERATION DES CHAMPS CP, VILLE, ETC  ######################}

<script>
 var placeSearch, autocomplete;
      var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        country: 'long_name',
        postal_code: 'short_name'
      };

      function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
            /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
            {types: ['geocode']});

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
      }

      function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        for (var component in componentForm) {
          document.getElementById(component).value = '';
          document.getElementById(component).disabled = false;
        }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        for (var i = 0; i < place.address_components.length; i++) {
          var addressType = place.address_components[i].types[0];
          if (componentForm[addressType]) {
            var val = place.address_components[i][componentForm[addressType]];
            document.getElementById(addressType).value = val;
          }
        }
      }

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
      function geolocate() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy
            });
            autocomplete.setBounds(circle.getBounds());
          });
        }
      }
    </script>
    
{################## JS DE lA MAP  ########################}




{#<script>#}
{#        var ville;#}
            
{#        function initMap() {#}
{#            var ville = {lat: 43.404811, lng: 5.053728};#}
{#            var map = new google.maps.Map(document.getElementById('map'), {#}
{#            zoom: 16,#}
{#            center: ville#}
{#            });#}

{#            var contentString = '<div id="content">'+#}
{#                '<div id="siteNotice">'+#}
{#                '</div>'+#}
{#                '<h1 id="firstHeading" class="firstHeading">Nom hébergement</h1>'+#}
{#                'Lat = '+#}
{#                'Longitude = '#}
{#                '</div>'+#}
{#                '</div>';#}

{#            console.log(contentString);#}

{#            var infowindow = new google.maps.InfoWindow({#}
{#                content: contentString#}
{#            });#}
            

{#            var marker = new google.maps.Marker({#}
{#            position: ville,#}
{#            map: map,#}
{#            draggable: true,#}
{#            title: 'Nom de l\'hébergement'#}
{#            });#}

{#            marker.addListener('click', function() {#}
{#                infowindow.open(map, marker);#}
{#            });#}

{#        }#}
{#    </script>#}
{#    <script async defer#}
{#    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAVHTurRNPGNOsAA6Nuocp_nz9jN2APhck&callback=initMap">#}
{#    </script> #}


{#<script>#}
    
{#class Carousel {#}
{#  /**#}
{#   * This callback type is called `requestCallback` and is displayed as a global symbol.#}
{#   *#}
{#   * @callback moveCallback#}
{#   * @param {number} index#}
{#   */#}

{#  /**#}
{#   * @param {HTMLElement} element#}
{#   * @param {Object} options#}
{#   * @param {Object} [options.slidesToScroll=1] Nombre d'éléments à faire défiler#}
{#   * @param {Object} [options.slidesVisible=1] Nombre d'éléments visible dans un slide#}
{#   * @param {boolean} [options.loop=false] Doit-t-on boucler en fin de carousel#}
{#   * @param {boolean} [options.pagination=false]#}
{#   * @param {boolean} [options.navigation=true]#}
{#   */#}
  
{#  constructor (element, options = {}) {#}
{#    this.element = element#}
{#    this.options = Object.assign({}, {#}
{#      slidesToScroll: 1,#}
{#      slidesVisible: 1,#}
{#      loop: false,#}
{#      pagination: false,#}
{#      navigation: true#}
{#    }, options)#}
{#    let children = [].slice.call(element.children)#}
{#    this.isMobile = false#}
{#    this.currentItem = 0#}
{#    this.moveCallbacks = []#}

    // Modification du DOM
{#    this.root = this.createDivWithClass('carousel')#}
{#    this.container = this.createDivWithClass('carousel__container')#}
{#    this.root.setAttribute('tabindex', '0')#}
{#    this.root.appendChild(this.container)#}
{#    this.element.appendChild(this.root)#}
{#    this.items = children.map((child) => {#}
{#      let item = this.createDivWithClass('carousel__item')#}
{#      item.appendChild(child)#}
{#      this.container.appendChild(item)#}
{#      return item#}
{#    })#}
{#    this.setStyle()#}
{#    if (this.options.navigation) {#}
{#      this.createNavigation()#}
{#    }#}
{#    if (this.options.pagination) {#}
{#      this.createPagination()#}
{#    }#}

    // Evenements
{#    this.moveCallbacks.forEach(cb => cb(0))#}
{#    this.onWindowResize()#}
{#    window.addEventListener('resize', this.onWindowResize.bind(this))#}
{#    this.root.addEventListener('keyup', e => {#}
{#      if (e.key === 'ArrowRight' || e.key === 'Right') {#}
{#        this.next()#}
{#      } else if (e.key === 'ArrowLeft' || e.key === 'Left') {#}
{#        this.prev()#}
{#      }#}
{#    })#}
{#  }#}

{#  /**#}
{#   * Applique les bonnes dimensions aux éléments du carousel#}
{#   */#}
{#  setStyle () {#}
{#    let ratio = this.items.length / this.slidesVisible#}
{#    this.container.style.width = (ratio * 100) + "%"#}
{#    this.items.forEach(item => item.style.width = ((100 / this.slidesVisible) / ratio) + "%")#}
{#  }#}

{#  /**#}
{#   * Crée les flêches de navigation dans le DOM#}
{#   */#}
{#  createNavigation () {#}
{#    let nextButton = this.createDivWithClass('carousel__next')#}
{#    let prevButton = this.createDivWithClass('carousel__prev')#}
{#    this.root.appendChild(nextButton)#}
{#    this.root.appendChild(prevButton)#}
{#    nextButton.addEventListener('click', this.next.bind(this))#}
{#    prevButton.addEventListener('click', this.prev.bind(this))#}
{#    if (this.options.loop === true) {#}
{#      return#}
{#    }#}
{#    this.onMove(index => {#}
{#      if (index === 0) {#}
{#        prevButton.classList.add('carousel__prev--hidden')#}
{#      } else {#}
{#        prevButton.classList.remove('carousel__prev--hidden')#}
{#      }#}
{#      if (this.items[this.currentItem + this.slidesVisible] === undefined) {#}
{#        nextButton.classList.add('carousel__next--hidden')#}
{#      } else {#}
{#        nextButton.classList.remove('carousel__next--hidden')#}
{#      }#}
{#    })#}
{#  }#}

{#  /**#}
{#   * Crée la pagination dans le DOM#}
{#   */#}
{#  createPagination () {#}
{#    let pagination = this.createDivWithClass('carousel__pagination')#}
{#    let buttons = []#}
{#    this.root.appendChild(pagination)#}
{#    for (let i = 0; i < this.items.length; i = i + this.options.slidesToScroll) {#}
{#      let button = this.createDivWithClass('carousel__pagination__button')#}
{#      button.addEventListener('click', () => this.gotoItem(i))#}
{#      pagination.appendChild(button)#}
{#      buttons.push(button)#}
{#    }#}
{#    this.onMove(index => {#}
{#      let activeButton = buttons[Math.floor(index / this.options.slidesToScroll)]#}
{#      if (activeButton) {#}
{#        buttons.forEach(button => button.classList.remove('carousel__pagination__button--active'))#}
{#        activeButton.classList.add('carousel__pagination__button--active')#}
{#      }#}
{#    })#}
{#  }#}

{#  /**#}
{#   *#}
{#   */#}
{#  next () {#}
{#    this.gotoItem(this.currentItem + this.slidesToScroll)#}
{#  }#}

{#  prev () {#}
{#    this.gotoItem(this.currentItem - this.slidesToScroll)#}
{#  }#}

{#  /**#}
{#   * Déplace le carousel vers l'élément ciblé#}
{#   * @param {number} index#}
{#   */#}
{#  gotoItem (index) {#}
{#    if (index < 0) {#}
{#      if (this.options.loop) {#}
{#        index = this.items.length - this.slidesVisible#}
{#      } else {#}
{#        return#}
{#      }#}
{#    } else if (index >= this.items.length || (this.items[this.currentItem + this.slidesVisible] === undefined && index > this.currentItem)) {#}
{#      if (this.options.loop) {#}
{#        index = 0#}
{#      } else {#}
{#        return#}
{#      }#}
{#    }#}
{#    let translateX = index * -100 / this.items.length#}
{#    this.container.style.transform = 'translate3d(' + translateX + '%, 0, 0)'#}
{#    this.currentItem = index#}
{#    this.moveCallbacks.forEach(cb => cb(index))#}
{#  }#}

{#  /**#}
{#   * Rajoute un écouteur qui écoute le déplacement du carousel#}
{#   * @param {moveCallback} cb#}
{#   */#}
{#  onMove (cb) {#}
{#    this.moveCallbacks.push(cb)#}
{#  }#}

{#  /**#}
{#   * Ecouteur pour le redimensionnement de la fenêtre#}
{#   */#}
{#  onWindowResize () {#}
{#    let mobile = window.innerWidth < 800#}
{#    if (mobile !== this.isMobile) {#}
{#      this.isMobile = mobile#}
{#      this.setStyle()#}
{#      this.moveCallbacks.forEach(cb => cb(this.currentItem))#}
{#    }#}
{#  }#}

{#  /**#}
{#   * Helper pour créer une div avec une classe#}
{#   * @param {string} className#}
{#   * @returns {HTMLElement}#}
{#   */#}
{#  createDivWithClass (className) {#}
{#    let div = document.createElement('div')#}
{#    div.setAttribute('class', className)#}
{#    return div#}
{#  }#}

{#  /**#}
{#   * @returns {number}#}
{#   */#}
{#  get slidesToScroll () {#}
{#    return this.isMobile ? 1 : this.options.slidesToScroll#}
{#  }#}

{#  /**#}
{#   * @returns {number}#}
{#   */#}
{#  get slidesVisible () {#}
{#    return this.isMobile ? 1 : this.options.slidesVisible#}
{#  }#}

{#}#}

{#let onReady = function () {#}

{#  new Carousel(document.querySelector('#carousel1'), {#}
{#      slidesVisible: 1,#}
{#      slidesToScroll: 1,#}
{#      loop: true#}
{#  })#}

{#}#}

{#if (document.readyState !== 'loading') {#}
{#  onReady()#}
{#}#}
{#document.addEventListener('DOMContentLoaded', onReady)#}
{#</script>#}

{% endblock %}

